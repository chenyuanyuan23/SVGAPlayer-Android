// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: wire.proto
package com.opensource.svgaplayer.proto;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoAdapterJvm;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.lang.Float;
import java.lang.Object;
import java.lang.Override;
import okio.ByteString;

public final class Transform extends AndroidMessage<Transform, Transform.Builder> {
  public static final ProtoAdapter<Transform> ADAPTER = ProtoAdapterJvm.newMessageAdapter(Transform.class);

  public static final Creator<Transform> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Float DEFAULT_A = 0.0f;

  public static final Float DEFAULT_B = 0.0f;

  public static final Float DEFAULT_C = 0.0f;

  public static final Float DEFAULT_D = 0.0f;

  public static final Float DEFAULT_TX = 0.0f;

  public static final Float DEFAULT_TY = 0.0f;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float a;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float b;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float c;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float d;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float tx;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float ty;

  public Transform(Float a, Float b, Float c, Float d, Float tx, Float ty) {
    this(a, b, c, d, tx, ty, ByteString.EMPTY);
  }

  public Transform(Float a, Float b, Float c, Float d, Float tx, Float ty,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.tx = tx;
    this.ty = ty;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.a = a;
    builder.b = b;
    builder.c = c;
    builder.d = d;
    builder.tx = tx;
    builder.ty = ty;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Transform)) return false;
    Transform o = (Transform) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(a, o.a)
        && Internal.equals(b, o.b)
        && Internal.equals(c, o.c)
        && Internal.equals(d, o.d)
        && Internal.equals(tx, o.tx)
        && Internal.equals(ty, o.ty);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (a != null ? a.hashCode() : 0);
      result = result * 37 + (b != null ? b.hashCode() : 0);
      result = result * 37 + (c != null ? c.hashCode() : 0);
      result = result * 37 + (d != null ? d.hashCode() : 0);
      result = result * 37 + (tx != null ? tx.hashCode() : 0);
      result = result * 37 + (ty != null ? ty.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Transform, Builder> {
    public Float a;

    public Float b;

    public Float c;

    public Float d;

    public Float tx;

    public Float ty;

    public Builder() {
    }

    public Builder a(Float a) {
      this.a = a;
      return this;
    }

    public Builder b(Float b) {
      this.b = b;
      return this;
    }

    public Builder c(Float c) {
      this.c = c;
      return this;
    }

    public Builder d(Float d) {
      this.d = d;
      return this;
    }

    public Builder tx(Float tx) {
      this.tx = tx;
      return this;
    }

    public Builder ty(Float ty) {
      this.ty = ty;
      return this;
    }

    @Override
    public Transform build() {
      return new Transform(a, b, c, d, tx, ty, super.buildUnknownFields());
    }
  }
}
