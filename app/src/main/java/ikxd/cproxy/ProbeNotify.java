// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: cproxy.proto
package ikxd.cproxy;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import okio.ByteString;

public final class ProbeNotify extends AndroidMessage<ProbeNotify, ProbeNotify.Builder> {
  public static final ProtoAdapter<ProbeNotify> ADAPTER = ProtoAdapter.newMessageAdapter(ProbeNotify.class);

  public static final Creator<ProbeNotify> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TS = 0L;

  /**
   * nano seconds
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long ts;

  public ProbeNotify(Long ts) {
    this(ts, ByteString.EMPTY);
  }

  public ProbeNotify(Long ts, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ts = ts;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ts = ts;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ProbeNotify)) return false;
    ProbeNotify o = (ProbeNotify) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(ts, o.ts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ts != null ? ts.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ProbeNotify, Builder> {
    public Long ts;

    public Builder() {
    }

    /**
     * nano seconds
     */
    public Builder ts(Long ts) {
      this.ts = ts;
      return this;
    }

    @Override
    public ProbeNotify build() {
      return new ProbeNotify(ts, super.buildUnknownFields());
    }
  }
}
