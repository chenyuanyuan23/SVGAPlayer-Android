// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: common.proto
package common;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import okio.ByteString;

public final class Header extends AndroidMessage<Header, Header.Builder> {
  public static final ProtoAdapter<Header> ADAPTER = ProtoAdapter.newMessageAdapter(Header.class);

  public static final Creator<Header> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SNAME = "";

  public static final Long DEFAULT_SEQID = 0L;

  public static final Long DEFAULT_CODE = 0L;

  public static final String DEFAULT_LANG = "";

  public static final String DEFAULT_TID = "";

  public static final String DEFAULT_ROOMID = "";

  public static final String DEFAULT_METHOD = "";

  public static final String DEFAULT_VERSION = "";

  public static final MSGTYPE DEFAULT_MSGTYPE = MSGTYPE.MSGTYPE_UNKNOWN;

  public static final Boolean DEFAULT_BACK_GROUND = false;

  public static final ByteString DEFAULT_BIZ = ByteString.EMPTY;

  public static final ByteString DEFAULT_ROUTING_KEY = ByteString.EMPTY;

  /**
   * service name
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String sname;

  /**
   * sequence id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long seqid;

  /**
   * return code
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long code;

  /**
   * 语言代码_国家代码，如:zh_CN，en_US
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String lang;

  /**
   * traceid 客户端不用填，只需要收到包的时候log出来
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tid;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String roomid;

  /**
   * rpc调用时使用的函数名称
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String method;

  /**
   * 版本信息, 客户端现在用这个字段来区分新老消息，老版本消息禁止填写
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String version;

  /**
   * 消息类型
   */
  @WireField(
      tag = 9,
      adapter = "common.Header$MSGTYPE#ADAPTER"
  )
  public final MSGTYPE msgtype;

  /**
   * 是否处于后台，true表示处于后台，false表示处于前台。MSGTYPE_REQ类型消息才需要
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean back_ground;

  /**
   * 业务透传字段。
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString biz;

  /**
   * 扩展字段
   */
  @WireField(
      tag = 12,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final Map<String, ByteString> extend;

  /**
   * 路由信息
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString routing_key;

  public Header(String sname, Long seqid, Long code, String lang, String tid, String roomid,
      String method, String version, MSGTYPE msgtype, Boolean back_ground, ByteString biz,
      Map<String, ByteString> extend, ByteString routing_key) {
    this(sname, seqid, code, lang, tid, roomid, method, version, msgtype, back_ground, biz, extend, routing_key, ByteString.EMPTY);
  }

  public Header(String sname, Long seqid, Long code, String lang, String tid, String roomid,
      String method, String version, MSGTYPE msgtype, Boolean back_ground, ByteString biz,
      Map<String, ByteString> extend, ByteString routing_key, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.sname = sname;
    this.seqid = seqid;
    this.code = code;
    this.lang = lang;
    this.tid = tid;
    this.roomid = roomid;
    this.method = method;
    this.version = version;
    this.msgtype = msgtype;
    this.back_ground = back_ground;
    this.biz = biz;
    this.extend = Internal.immutableCopyOf("extend", extend);
    this.routing_key = routing_key;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.sname = sname;
    builder.seqid = seqid;
    builder.code = code;
    builder.lang = lang;
    builder.tid = tid;
    builder.roomid = roomid;
    builder.method = method;
    builder.version = version;
    builder.msgtype = msgtype;
    builder.back_ground = back_ground;
    builder.biz = biz;
    builder.extend = Internal.copyOf(extend);
    builder.routing_key = routing_key;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Header)) return false;
    Header o = (Header) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(sname, o.sname)
        && Internal.equals(seqid, o.seqid)
        && Internal.equals(code, o.code)
        && Internal.equals(lang, o.lang)
        && Internal.equals(tid, o.tid)
        && Internal.equals(roomid, o.roomid)
        && Internal.equals(method, o.method)
        && Internal.equals(version, o.version)
        && Internal.equals(msgtype, o.msgtype)
        && Internal.equals(back_ground, o.back_ground)
        && Internal.equals(biz, o.biz)
        && extend.equals(o.extend)
        && Internal.equals(routing_key, o.routing_key);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (sname != null ? sname.hashCode() : 0);
      result = result * 37 + (seqid != null ? seqid.hashCode() : 0);
      result = result * 37 + (code != null ? code.hashCode() : 0);
      result = result * 37 + (lang != null ? lang.hashCode() : 0);
      result = result * 37 + (tid != null ? tid.hashCode() : 0);
      result = result * 37 + (roomid != null ? roomid.hashCode() : 0);
      result = result * 37 + (method != null ? method.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (msgtype != null ? msgtype.hashCode() : 0);
      result = result * 37 + (back_ground != null ? back_ground.hashCode() : 0);
      result = result * 37 + (biz != null ? biz.hashCode() : 0);
      result = result * 37 + extend.hashCode();
      result = result * 37 + (routing_key != null ? routing_key.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Header, Builder> {
    public String sname;

    public Long seqid;

    public Long code;

    public String lang;

    public String tid;

    public String roomid;

    public String method;

    public String version;

    public MSGTYPE msgtype;

    public Boolean back_ground;

    public ByteString biz;

    public Map<String, ByteString> extend;

    public ByteString routing_key;

    public Builder() {
      extend = Internal.newMutableMap();
    }

    /**
     * service name
     */
    public Builder sname(String sname) {
      this.sname = sname;
      return this;
    }

    /**
     * sequence id
     */
    public Builder seqid(Long seqid) {
      this.seqid = seqid;
      return this;
    }

    /**
     * return code
     */
    public Builder code(Long code) {
      this.code = code;
      return this;
    }

    /**
     * 语言代码_国家代码，如:zh_CN，en_US
     */
    public Builder lang(String lang) {
      this.lang = lang;
      return this;
    }

    /**
     * traceid 客户端不用填，只需要收到包的时候log出来
     */
    public Builder tid(String tid) {
      this.tid = tid;
      return this;
    }

    public Builder roomid(String roomid) {
      this.roomid = roomid;
      return this;
    }

    /**
     * rpc调用时使用的函数名称
     */
    public Builder method(String method) {
      this.method = method;
      return this;
    }

    /**
     * 版本信息, 客户端现在用这个字段来区分新老消息，老版本消息禁止填写
     */
    public Builder version(String version) {
      this.version = version;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder msgtype(MSGTYPE msgtype) {
      this.msgtype = msgtype;
      return this;
    }

    /**
     * 是否处于后台，true表示处于后台，false表示处于前台。MSGTYPE_REQ类型消息才需要
     */
    public Builder back_ground(Boolean back_ground) {
      this.back_ground = back_ground;
      return this;
    }

    /**
     * 业务透传字段。
     */
    public Builder biz(ByteString biz) {
      this.biz = biz;
      return this;
    }

    /**
     * 扩展字段
     */
    public Builder extend(Map<String, ByteString> extend) {
      Internal.checkElementsNotNull(extend);
      this.extend = extend;
      return this;
    }

    /**
     * 路由信息
     */
    public Builder routing_key(ByteString routing_key) {
      this.routing_key = routing_key;
      return this;
    }

    @Override
    public Header build() {
      return new Header(sname, seqid, code, lang, tid, roomid, method, version, msgtype, back_ground, biz, extend, routing_key, super.buildUnknownFields());
    }
  }

  public enum MSGTYPE implements WireEnum {
    MSGTYPE_UNKNOWN(0),

    /**
     * 请求消息
     */
    MSGTYPE_REQ(1),

    /**
     * 响应消息
     */
    MSGTYPE_RESP(2),

    /**
     * 单播消息
     */
    MSGTYPE_NOTICE(3);

    public static final ProtoAdapter<MSGTYPE> ADAPTER = ProtoAdapter.newEnumAdapter(MSGTYPE.class);

    private final int value;

    MSGTYPE(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static MSGTYPE fromValue(int value) {
      switch (value) {
        case 0: return MSGTYPE_UNKNOWN;
        case 1: return MSGTYPE_REQ;
        case 2: return MSGTYPE_RESP;
        case 3: return MSGTYPE_NOTICE;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}
