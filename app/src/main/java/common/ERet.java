// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: common.proto
package common;

import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.WireEnum;
import java.lang.Override;

/**
 * 系统保留错误码 0-999
 */
public enum ERet implements WireEnum {
  kRetSuccess(0),

  /**
   * 参数错误
   */
  kRetErrParameter(1),

  /**
   * cookie错误
   */
  kRetErrCookie(2),

  /**
   * 未授权
   */
  kRetErrUnauthorized(3),

  /**
   * 服务器不支持的uri
   */
  kRetErrUnknowUri(4),

  /**
   * 不再支持该版本
   */
  kRetErrVersion(5),

  /**
   * 账号被封禁
   */
  kRetErrBanned(6),

  /**
   * 服务器忙
   */
  kRetErrBusy(7),

  /**
   * Some requested entity (e.g., file or directory) was not found.
   * HTTP Mapping: 404 Not Found
   */
  kRetErrNotFound(8),

  /**
   * The entity that a client attempted to create (e.g., file or directory)
   * already exists.
   *
   * HTTP Mapping: 409 Conflict
   */
  kRetErrAlreadyExists(9),

  /**
   * The caller does not have permission to execute the specified
   * operation. `PERMISSION_DENIED` must not be used for rejections
   * caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
   * instead for those errors). `PERMISSION_DENIED` must not be
   * used if the caller can not be identified (use `UNAUTHENTICATED`
   * instead for those errors). This error code does not imply the
   * request is valid or the requested entity exists or satisfies
   * other pre-conditions.
   *
   * HTTP Mapping: 403 Forbidden
   */
  kRetErrPermissionDenied(10),

  /**
   * 版本不兼容，操作无法完成
   */
  kRetErrIncompatibleVersion(11),

  /**
   * 系统错误，尽量少用这个
   */
  kRetErrSystem(999),

  /**
   * 游戏不存在，可能已经下架
   */
  kRetErrGameIdNotExist(1001),

  /**
   * im pk重复邀请
   */
  kRetErrImPkRepeatedInvite(1002),

  /**
   * im pk邀请过期
   */
  kRetErrImPkInviteOutOfDate(1003),

  /**
   * 创建pk URl失败
   */
  kRetErrGenPkGameUrlFailed(1004),

  /**
   * s2s AddrlistFriends接口失败
   */
  kRetErrS2SAddrlistFriendsFailed(1005),

  /**
   * s2s FbFriends接口失败
   */
  kRetErrS2SFbFriendsFailed(1006),

  /**
   * s2s GetFriendList接口失败
   */
  kRetErrS2SGetFriendListFailed(1007),

  /**
   * s2s GetUserStatus接口失败
   */
  kRetErrS2SGetUserStatusFailed(1008),

  /**
   * s2s GetUsersInfo接口失败
   */
  kRetErrS2SGetUsersInfoFailed(1009),

  /**
   * 游戏维护中
   */
  kRetErrGameMaintain(1010),

  /**
   * 游戏标满
   */
  kRetErrGameFull(1011),

  /**
   * im pk邀请已被接受
   */
  kRetErrImPkInviteAccepted(1012),

  /**
   * 场次无效
   */
  kRetErrIdInvalid(1013),

  /**
   * 能量不足
   */
  kRetErrPowerLow(1014),

  /**
   * 钱不足
   */
  kRetErrMoneyLow(1015),

  /**
   * source错误
   */
  kRetErrSource(1016),

  /**
   * 达到每天上限1000人
   */
  kRetErrRecommendDailyLimit(1051),

  /**
   * 附近找不到人
   */
  kRetErrRecommendNearbyNone(1052),

  /**
   * 2000 - 2100 组队游戏专用
   * 组队人数已满
   */
  kRetErrTeamFull(2000),

  /**
   * 组队已失效
   */
  kRetErrTeamInvalid(2001),

  /**
   * 游戏已开始
   */
  kRetErrGameHasBegun(2002),

  /**
   * 用户游戏状态为游戏中，不能创建或加入新队伍
   */
  kRetErrGameing(2003),

  /**
   * 邀请者已离开房间
   */
  kRetErrInviteLeaved(2004),

  /**
   * 用户在团队中，不能重新创建团队
   */
  KRetErrBelongTeam(2005),

  /**
   * 获取游戏信息失败
   */
  kRetErrGetGameInfoErr(2006),

  /**
   * 不在匹配中
   */
  kRetErrNoInMatch(2007),

  /**
   * 取消匹配失败
   */
  kRetErrCancelMatchErr(2008),

  /**
   * 用户不在指定房间
   */
  kRetErrUserNotInRoom(2009),

  /**
   * 团队匹配中
   */
  kRetErrTeamMatching(2010),

  /**
   * 对方已接受你发起的im创建团队邀请，暂时不能再接受其它组队邀请
   */
  kRetErrImTeamCreating(2011),

  /**
   * 部分用户不支持切换组队模板
   */
  kRetErrChangeTemplate(2012),

  /**
   * 2101 - 2200 语音呼叫协议专用
   * 自己正在忙碌中，例如正在游戏中（现在不支持），正在通话中
   */
  kRetErrVoiceChatSelfBusy(2101),

  /**
   * 对方正在忙碌中，例如正在游戏中（现在不支持），正在通话中
   */
  kRetErrVoiceChatOtherBusy(2102),

  /**
   * 呼叫超时
   */
  kRetErrVoiceChatCallTimeout(2103),

  /**
   * 不是被呼叫的用户
   */
  kRetErrVoiceChatUserNotBeCall(2104),

  /**
   * 聊天已经开始（取消失败的情况下）
   */
  kRetErrVoiceChatHadStarted(2105),

  /**
   * 通话已结束
   */
  kRetErrVoiceChatHadStop(2106),

  /**
   * 对方不在线
   */
  kRetErrVoiceChatOffLine(2107);

  public static final ProtoAdapter<ERet> ADAPTER = ProtoAdapter.newEnumAdapter(ERet.class);

  private final int value;

  ERet(int value) {
    this.value = value;
  }

  /**
   * Return the constant for {@code value} or null.
   */
  public static ERet fromValue(int value) {
    switch (value) {
      case 0: return kRetSuccess;
      case 1: return kRetErrParameter;
      case 2: return kRetErrCookie;
      case 3: return kRetErrUnauthorized;
      case 4: return kRetErrUnknowUri;
      case 5: return kRetErrVersion;
      case 6: return kRetErrBanned;
      case 7: return kRetErrBusy;
      case 8: return kRetErrNotFound;
      case 9: return kRetErrAlreadyExists;
      case 10: return kRetErrPermissionDenied;
      case 11: return kRetErrIncompatibleVersion;
      case 999: return kRetErrSystem;
      case 1001: return kRetErrGameIdNotExist;
      case 1002: return kRetErrImPkRepeatedInvite;
      case 1003: return kRetErrImPkInviteOutOfDate;
      case 1004: return kRetErrGenPkGameUrlFailed;
      case 1005: return kRetErrS2SAddrlistFriendsFailed;
      case 1006: return kRetErrS2SFbFriendsFailed;
      case 1007: return kRetErrS2SGetFriendListFailed;
      case 1008: return kRetErrS2SGetUserStatusFailed;
      case 1009: return kRetErrS2SGetUsersInfoFailed;
      case 1010: return kRetErrGameMaintain;
      case 1011: return kRetErrGameFull;
      case 1012: return kRetErrImPkInviteAccepted;
      case 1013: return kRetErrIdInvalid;
      case 1014: return kRetErrPowerLow;
      case 1015: return kRetErrMoneyLow;
      case 1016: return kRetErrSource;
      case 1051: return kRetErrRecommendDailyLimit;
      case 1052: return kRetErrRecommendNearbyNone;
      case 2000: return kRetErrTeamFull;
      case 2001: return kRetErrTeamInvalid;
      case 2002: return kRetErrGameHasBegun;
      case 2003: return kRetErrGameing;
      case 2004: return kRetErrInviteLeaved;
      case 2005: return KRetErrBelongTeam;
      case 2006: return kRetErrGetGameInfoErr;
      case 2007: return kRetErrNoInMatch;
      case 2008: return kRetErrCancelMatchErr;
      case 2009: return kRetErrUserNotInRoom;
      case 2010: return kRetErrTeamMatching;
      case 2011: return kRetErrImTeamCreating;
      case 2012: return kRetErrChangeTemplate;
      case 2101: return kRetErrVoiceChatSelfBusy;
      case 2102: return kRetErrVoiceChatOtherBusy;
      case 2103: return kRetErrVoiceChatCallTimeout;
      case 2104: return kRetErrVoiceChatUserNotBeCall;
      case 2105: return kRetErrVoiceChatHadStarted;
      case 2106: return kRetErrVoiceChatHadStop;
      case 2107: return kRetErrVoiceChatOffLine;
      default: return null;
    }
  }

  @Override
  public int getValue() {
    return value;
  }
}
